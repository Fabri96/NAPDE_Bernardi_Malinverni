%=======================================================================================================
% This contain all the information for running main
% TEMPLATE OF THE STRUCT DATI
%=======================================================================================================
%
%  DATI= struct( 'name',              % set the name of the test 
%                'Domain',            % set the domain [x1,x2;y1,y2]
%                'exact_sol',         % set the exact solution
%                'force',             % set the forcing term
%                'grad_exact_1',      % set the first componenet of the gradient of the exact solution
%                'grad_exact_2',      % set the second componenet of the gradient of the exact solution
%                'fem',               % set finite element space
%                'nqn_1D',            % number of quadrature nodes for integrals over lines
%                'nqn_2D',            % number of quadrature nodes for integrals over elements
%                'MeshType',          % set the elements of the mesh  'TS'
%                'refinement_vector', % set the level of refinement for the grid
%                'visual_graph',      % if you want to display the graphical results ['Y','N']
%                'print_out',         % if you want to print out the results ['Y','N']
%                'plot_errors'        % you want to plot the computed errors ['Y','N']
% 
%========================================================================================================

function [Dati]=C_dati(test)

if test=='Test1'
Dati = struct( 'name',             test,...
               ... % Test name
               'name_method',       'SUPG',... 
               ... % Discretization method ('CG','SUPG')
               'domain',           [0,1;0,1],...                          
               ... % Domain bounds       
               'mu',               0, ...
               ... % Diffusive term ...
               'sigma',            0, ...
               ... % Reactive term ...
               'beta_x',             '100 + 0.*x.^0 + 0.*y.^0', ...
               ... % Advection term y ...
               'beta_y',             '100 + 0.*x.^0 + 0.*y.^0', ...
               ... % Advection term x ...
               'div_beta',            '0.*x.^0 + 0.*y',...
               ... % Divergence of beta
               'T',               1, ...
               ... % Final time ...
               'dt',            0.001, ...
               ... % Time step ...
               'theta',             1, ...
               ... % Theta-method ..
               'initialcond',      'sin(2*pi*x) .* (y.^3-y)', ...
               ... % Initial condition 
               'exact_sol',        'exp(-t) .* sin(2*pi*x) .* (y.^3-y)',...      
               ... % Definition of exact solution
               'force',            '- sin(2*pi*x) .* (y.^3-y) - 10^-3 * (-4*pi^2 * sin(2*pi*x).*(y.^3-y) + 6*y*sin(2*pi*x))  + 1*2*pi*cos(2*pi*x).*(y.^3-y) + 1*sin(2*pi*x).*(3*y.^2-1))',...  
               ... % Forcing term in space
               'forcetime',        'exp(-t)',...
               ... % Forcing term in time        
               'grad_exact_1',     '2*pi * exp(-t) .* cos(2*pi*x) .* (y.^3-y)',...    
               ... % Definition of exact gradient (x comp) 
               'grad_exact_2',     'exp(-t) .* sin(2*pi*x) .* (3*y.^2-1)',...    
               ... % Definition of exact gradient (y comp)
               'fem',              'P1',...         
               ... % P1-fe
               'nqn_1D',            3,...           
               ... % Number of quad. points per edge
               'nqn_2D',            3,...           
               ... % Number of quad. points per triangle
               'MeshType',         'TS', ...        
               ... % Triangular Structured mesh
               'refinement_vector', [2,3,4,5],...   
               ... % Refinement levels for  the error analysis
               'visual_graph',      'N',...
               ... % Visualization of the solution(Y/N)
               'plot_errors',       'N' ...
               ...% Compute Errors 
               );
           
elseif test=='Test2'
Dati = struct( 'name',             test,...
               ... % Test name
               'name_method',       'SUPG',... 
               ... % Discretization method ('CG','SUPG')
               'domain',           [0,1;0,1],...                          
               ... % Domain bounds       
               'mu',               0, ...
               ... % Diffusive term ...
               'sigma',            0, ...
               ... % Reactive term ...
               'beta_x',             '100 + 0.*x.^0 + 0.*y.^0', ...
               ... % Advection term y ...
               'beta_y',             '100 + 0.*x.^0 + 0.*y.^0', ...
               ... % Advection term x ...
               'div_beta',            '0.*x.^0 + 0.*y',...
               ... % Divergence of beta
               'T',               1, ...
               ... % Final time ...
               'dt',            0.001, ...
               ... % Time step ...
               'theta',             1, ...
               ... % Theta-method ..
               'initialcond',      '(sin(2*pi*x)).^2.*sin(2*pi*y)', ...
               ... % Initial condition 
               'exact_sol',        'exp(-t).*(sin(2*pi*x)).^2.*sin(2*pi*y)',...      
               ... % Definition of exact solution
               'force',            '-10*exp(4*y) .* (y.^3-7/4*y.^2+3/4*y).*(x.^3-3/2*x.^2+1/2*x)',...  
               ... % Forcing term in space
               'forcetime',        'exp(-t)',...
               ... % Forcing term in time        
               'grad_exact_1',     '4*pi*exp(-t).*sin(2*pi*y).*sin(2*pi*x).*cos(2*pi*x)',...    
               ... % Definition of exact gradient (x comp) 
               'grad_exact_2',     '2*pi*exp(-t).*(sin(2*pi*x)).^2.*cos(2*pi*y)',...    
               ... % Definition of exact gradient (y comp)
               'fem',              'P1',...         
               ... % P1-fe
               'nqn_1D',            3,...           
               ... % Number of quad. points per edge
               'nqn_2D',            3,...           
               ... % Number of quad. points per triangle
               'MeshType',         'TS', ...        
               ... % Triangular Structured mesh
               'refinement_vector', [2,3,4,5],...   
               ... % Refinement levels for  the error analysis
               'visual_graph',      'N',...
               ... % Visualization of the solution(Y/N)
               'plot_errors',       'N' ...
               ...% Compute Errors 
               );
           
elseif test=='Test3'
Dati = struct( 'name',             test,...
               ... % Test name
               'name_method',       'SUPG',... 
               ... % Discretization method ('CG','SUPG')
               'domain',           [0,1;0,1],...                          
               ... % Domain bounds       
               'mu',               0, ...
               ... % Diffusive term ...
               'sigma',            0, ...
               ... % Reactive term ...
               'beta_x',             '100 + 0.*x.^0 + 0.*y.^0', ...
               ... % Advection term y ...
               'beta_y',             '100 + 0.*x.^0 + 0.*y.^0', ...
               ... % Advection term x ...
               'div_beta',            '0.*x.^0 + 0.*y',...
               ... % Divergence of beta
               'T',               1, ...
               ... % Final time ...
               'dt',            0.001, ...
               ... % Time step ...
               'theta',             1, ...
               ... % Theta-method ..
               'initialcond',      '10 .* exp(4*y) .* (y.^3 - 7/4*y.^2 + 3/4*y) .* (x.^3 - 3/2*x.^2 + 1/2*x)', ...
               ... % Initial condition 
               'exact_sol',        '10 .* exp(-t) .* exp(4*y) .* (y.^3 - 7/4*y.^2 + 3/4*y) .* (x.^3 - 3/2*x.^2 + 1/2*x)',...      
               ... % Definition of exact solution
               'force',            '-10*exp(4*y) .* (y.^3-7/4*y.^2+3/4*y).*(x.^3-3/2*x.^2+1/2*x)',...  
               ... % Forcing term in space
               'forcetime',        'exp(-t)',...
               ... % Forcing term in time        
               'grad_exact_1',     '10 .* exp(-t) .* exp (4*y) .* (y.^3 - 7/4*y.^2 + 3/4*y) .* (3*x.^2 - 3*x + 1/2)',...    
               ... % Definition of exact gradient (x comp) 
               'grad_exact_2',     'exp(-t) .* (x.^3 - 3/2*x.^2 + 1/2*x) .* (exp(4*y) .*(3*y.^2 -7/2*y+ 3/4)+ 4*exp(4*y) .*(y.^3 - 7/4*y.^2 + 3/4*y))',...    
               ... % Definition of exact gradient (y comp)
               'fem',              'P1',...         
               ... % P1-fe
               'nqn_1D',            3,...           
               ... % Number of quad. points per edge
               'nqn_2D',            3,...           
               ... % Number of quad. points per triangle
               'MeshType',         'TS', ...        
               ... % Triangular Structured mesh
               'refinement_vector', [2,3,4,5],...   
               ... % Refinement levels for  the error analysis
               'visual_graph',      'N',...
               ... % Visualization of the solution(Y/N)
               'plot_errors',       'N' ...
               ...% Compute Errors 
               );
           
           
           
           

end
